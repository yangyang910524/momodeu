<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jeeplus.modules.sys.mapper.CouresOfficeMapper">
    
	<sql id="couresOfficeColumns">
		ifnull(a.id,'') AS "id",
		ifnull(a.state,'') as "state",

		ifnull(a.officeid,'') AS "office.id",
		ifnull(so.name,'') AS "office.name",
		ifnull(so.campus,'') AS "office.campus",

		ifnull(nr.id,'') AS "courseData.id",
        ifnull(nr.data,'') AS "courseData.data",
        ifnull(nr.remarks,'') AS "courseData.remarks",

        ifnull(zj.id,'') AS "courseInfo.id",
		ifnull(zj.name,'') AS "courseInfo.name",
		ifnull(zj.sort,'') AS "courseInfo.sort",
		ifnull(zj.title_type,'') AS "courseInfo.titleType",
		ifnull(zj.remarks,'') AS "courseInfo.remarks",

		ifnull(kc.id,'') AS "father.id",
		ifnull(kc.name,'') AS "father.name",
		ifnull(kc.cover,'') AS "father.cover",
		ifnull(kc.level,'') AS "father.level",
		ifnull(kc.state,'') AS "father.state",
		ifnull(kc.sort,'') AS "father.sort",
		ifnull(kc.title_type,'') AS "father.titleType",
		<choose>
            <when test="userid != null and userid != ''">
                (select count(*) from course_data_play_record cdpr where cdpr.course_data_id=nr.id and cdpr.create_by=#{userid} ) as "playCount",
            </when>
            <otherwise>
                -1 as "playCount",
            </otherwise>
        </choose>
		ifnull(kc.remarks,'') AS "father.remarks"
	</sql>
	
	<sql id="couresOfficeJoins">
		left join sys_office so on so.id=a.officeid
		left join course_data nr on nr.id=a.couresid
		left join course_info zj on zj.id=nr.courseid
		left join course_info kc on kc.id=zj.parent_id
	</sql>
	
    
	<select id="get" resultType="CouresOffice" >
		SELECT 
			<include refid="couresOfficeColumns"/>
		FROM sys_coures_office a
		<include refid="couresOfficeJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="CouresOffice" >
		SELECT 
			<include refid="couresOfficeColumns"/>
		FROM sys_coures_office a
		<include refid="couresOfficeJoins"/>
		<where>
			${dataScope}
            <if test="courseData!=null and courseData.id != null and courseData.id != ''">
                AND nr.id = #{courseData.id}
            </if>
            <if test="office != null and office.id != null and office.id != ''">
                AND a.officeid = #{office.id}
            </if>

            <if test="father != null  and father.name != null and father.name != ''">
                AND kc.name LIKE CONCAT('%', #{father.name}, '%')
            </if>

            <if test="courseInfo != null  and courseInfo.name != null and courseInfo.name != ''">
                AND zj.name LIKE CONCAT('%', #{courseInfo.name}, '%')
            </if>

            <if test="father != null  and father.level != null and father.level != ''">
                AND kc.level = #{father.level}
            </if>

            <if test="father != null  and father.state != null and father.state != ''">
                AND kc.state =#{father.state}
            </if>

            <if test="father != null  and father.id != null and father.id != ''">
                AND kc.id = #{father.id}
            </if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY cast( kc.sort   as   SIGNED   INTEGER) ASC,cast( zj.sort   as   SIGNED   INTEGER) ASC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="CouresOffice" >
		SELECT 
			<include refid="couresOfficeColumns"/>
		FROM sys_coures_office a
		<include refid="couresOfficeJoins"/>
		<where>
			
			${dataScope}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO sys_coures_office(
			id,
			officeid,
			couresid,
			state
		) VALUES (
			#{id},
			#{office.id},
			#{courseData.id},
			#{state}
		)
	</insert>
	
	<update id="update">
		UPDATE sys_coures_office SET 	
			officeid = #{office.id},
			couresid = #{courseData.id},
			state = #{state}
		WHERE id = #{id}
	</update>
	
	
	<!--物理删除-->
	<update id="delete">
		DELETE FROM sys_coures_office
		WHERE id = #{id}
	</update>
	
	<!--逻辑删除-->
	<update id="deleteByLogic">
		UPDATE sys_coures_office SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	
	<!-- 根据实体名称和字段名称和字段值获取唯一记录 -->
	<select id="findUniqueByProperty" resultType="CouresOffice" statementType="STATEMENT">
		select * FROM sys_coures_office  where ${propertyName} = '${value}'
	</select>
	
</mapper>